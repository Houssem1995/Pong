/*
 *  Launcher.java
 *
 *  Copyright 2011 Kévin Gomez Pinto <contact@kevingomez.fr>
 *                 Jonathan Da Silva <Jonathan.Da_Silva1@etudiant.u-clermont1.fr>
 *
 *  This program is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation; either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program; if not, write to the Free Software
 *  Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
 *  MA 02110-1301, USA.
 */

package ui;

import game.MirrorPong;
import game.Pong;
import java.net.UnknownHostException;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;
import javax.swing.UIManager;


public class Launcher extends javax.swing.JFrame {
    private static final long serialVersionUID = 1L;
    
    
    private class PongLauncher extends Thread {
        private String host;
        private int port;
        private JFrame parent;

        public PongLauncher(JFrame parent, String host, int port) {
            this.host = host;
            this.port = port;
            this.parent = parent;
        }

        @Override
        public void run() {
            Pong pong = new Pong();

            try {
                pong.setDistantHost(host);
                pong.setDistantPort(port);
            } catch (UnknownHostException e) {
                JOptionPane.showMessageDialog(parent, e.getMessage());
                return;
            }

            try {
                pong.start();
            } catch (IllegalStateException e) {
                JOptionPane.showMessageDialog(parent, e.getMessage());
            }
        }
    }

    private class MirrorPongLauncher extends Thread {
        private int port;
        private int nbGames;
        private JFrame parent;
        private String level;

        public MirrorPongLauncher(JFrame parent, int port, int nbGames, String lvl) {
            this.port = port;
            this.nbGames = nbGames;
            this.parent = parent;
            level = lvl;
        }

        @Override
        public void run() {
            MirrorPong pong = new MirrorPong();

            pong.setPort(port);
            pong.setMaxPoints(nbGames);
            pong.setLevel(level);

            try {
                pong.start();
            } catch (IllegalStateException e) {
                JOptionPane.showMessageDialog(parent, e.getMessage());
            }
        }
    }
    

    /** Creates new form Launcher */
    public Launcher() {
        initComponents();
        try {
            UIManager.setLookAndFeel("com.sun.java.swing.plaf.windows.WindowsLookAndFeel");
            SwingUtilities.updateComponentTreeUI(this);
        } catch (Exception ex) {
            // pas grave
        }
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel3 = new javax.swing.JLabel();
        javax.swing.JLabel jLabel1 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        javax.swing.JLabel lblChoice = new javax.swing.JLabel();
        lblHost = new javax.swing.JLabel();
        javax.swing.JLabel lblPort = new javax.swing.JLabel();
        lblNbGames = new javax.swing.JLabel();
        cboxChoice = new javax.swing.JComboBox();
        tfHost = new javax.swing.JTextField();
        spinPort = new javax.swing.JSpinner();
        spingNbGames = new javax.swing.JSpinner();
        javax.swing.JButton btnQuit = new javax.swing.JButton();
        javax.swing.JButton btnLaunch = new javax.swing.JButton();
        lblLevel = new javax.swing.JLabel();
        cboxLevel = new javax.swing.JComboBox();

        jLabel3.setText("jLabel3");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Super Pong: Launcher");
        setResizable(false);

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Super Pong");
        getContentPane().add(jLabel1, java.awt.BorderLayout.NORTH);

        lblChoice.setText("Choix");

        lblHost.setText("Hôte");

        lblPort.setText("Port");

        lblNbGames.setText("Nombre de jeux");

        cboxChoice.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Serveur", "Client", "Les deux" }));
        cboxChoice.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cboxChoiceActionPerformed(evt);
            }
        });

        tfHost.setText("localhost");

        spinPort.setValue(6000);

        spingNbGames.setValue(5);

        btnQuit.setText("Quitter");
        btnQuit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnQuitActionPerformed(evt);
            }
        });

        btnLaunch.setText("Lancer");
        btnLaunch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLaunchActionPerformed(evt);
            }
        });

        lblLevel.setText("Difficulté");

        cboxLevel.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Noob", "Easy", "Medium", "Hard" }));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(lblLevel)
                    .addComponent(lblPort)
                    .addComponent(lblNbGames)
                    .addComponent(lblHost)
                    .addComponent(lblChoice))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(cboxLevel, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(spingNbGames)
                    .addComponent(spinPort)
                    .addComponent(cboxChoice, javax.swing.GroupLayout.Alignment.TRAILING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(tfHost, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 276, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(74, 74, 74)
                .addComponent(btnQuit, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 98, Short.MAX_VALUE)
                .addComponent(btnLaunch, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(82, 82, 82))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(51, 51, 51)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cboxChoice, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblChoice))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(tfHost, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblHost))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(spinPort, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblPort))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(spingNbGames, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblNbGames))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblLevel)
                    .addComponent(cboxLevel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(27, 27, 27)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnQuit)
                    .addComponent(btnLaunch))
                .addContainerGap())
        );

        getContentPane().add(jPanel1, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnQuitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnQuitActionPerformed
        System.exit(0);
    }//GEN-LAST:event_btnQuitActionPerformed

    private void btnLaunchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLaunchActionPerformed
        List<Thread> threads = new ArrayList<Thread>();
        int port, nbGames;
        
        //récuperation du choix dans la combo
        String serverOrClient = cboxChoice.getSelectedItem().toString();

        // hôte
        String host = tfHost.getText();
        
        // niveau
        String level = cboxLevel.getSelectedItem().toString();

        if(host.isEmpty()) {
            alert("Le champ hôte ne peut pas être vide.");
            return;
        }
        
        // port
        try {
            port = ((Integer) spinPort.getValue()).intValue();
        } catch (Exception e) {
            alert("Port incorrect");
            return;
        }

        // nombre de jeux
        try {
            nbGames = ((Integer) spingNbGames.getValue()).intValue();
        } catch (Exception e) {
            alert("Nombre de jeux incorrect");
            return;
        }

        //on verifie si on veut un serveur ou un client et on lance le jeu
        if (serverOrClient.equals("Serveur"))
            threads.add(new MirrorPongLauncher(this, port, nbGames, level));
        else if (serverOrClient.equals("Client"))
            threads.add(new PongLauncher(this, host, port));
        else {
            threads.add(new MirrorPongLauncher(this, port, nbGames, level));
            threads.add(new PongLauncher(this, host, port));
        }
        
        for(Thread t : threads)
            t.start();
    }//GEN-LAST:event_btnLaunchActionPerformed

    private void cboxChoiceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cboxChoiceActionPerformed
        boolean isClient = cboxChoice.getSelectedItem().equals("Client");

        //si mode client : on ne peut pas changer le nombre de parties
        spingNbGames.setVisible(!isClient);
        lblNbGames.setVisible(!isClient);
        
        // ou le niveau
        cboxLevel.setVisible(!isClient);
        lblLevel.setVisible(!isClient);

        tfHost.setVisible(!cboxChoice.getSelectedItem().equals("Serveur"));
        lblHost.setVisible(!cboxChoice.getSelectedItem().equals("Serveur"));
    }//GEN-LAST:event_cboxChoiceActionPerformed

    private void alert(String msg) {
        JOptionPane.showMessageDialog(this, msg);
    }
    
    
    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Launcher().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox cboxChoice;
    private javax.swing.JComboBox cboxLevel;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JLabel lblHost;
    private javax.swing.JLabel lblLevel;
    private javax.swing.JLabel lblNbGames;
    private javax.swing.JSpinner spinPort;
    private javax.swing.JSpinner spingNbGames;
    private javax.swing.JTextField tfHost;
    // End of variables declaration//GEN-END:variables

}
